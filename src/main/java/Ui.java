public class Ui {
    private static final String separation = "_________________________________________________";
    private static final int TODO = 0;
    private static final int DEADLINE = 1;
    private static final int EVENT = 2;
    private static final int MARK = 3;
    private static final int UNMARK = 4;
    private static final int DELETE = 5;
    private static final int UNKNOWN = 6;
    private static final int MISSING = 7;
    private TaskList tasks;

    public Ui(TaskList tasks) {
        this.tasks = tasks;
    }

    public static void start() {
        String logo =
                "‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä\n" +
                        "‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£Ä‚†§‚†Ñ‚†§‚†§‚¢Ñ‚£Ä‚£Ä‚£Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä\n" +
                        "‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£†‚†î‚¢í‚†ü‚†â‚†ë‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†â‚†£‚°Ä‚†ô‚£Ç‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä\n" +
                        "‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚†ó‚†Ä‚¢ó‚†Ç‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†à‚°è‚†Ä‚†à‚¢¢‚°Ä‚†Ä‚†Ä‚†Ä‚†Ä\n" +
                        "‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚°û‚†Ä‚†Ä‚¢∏‚†Ç‚¢∞‚£∂‚°Ñ‚††‚†§‚†¥‚†ø‚£á‚¢Ä‚£π‚°Ä‚†Ä‚†à‚¢£‚†Ä‚†Ä‚†Ä‚†Ä\n" +
                        "‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†∞‚°Ä‚†Ä‚†Ä‚¢®‚†¶‚†â‚†Å‚†Ä‚¢æ‚£ø‚°Ü‚†Ä‚†Ä‚†à‚†â‚£É‚†Ä‚¢Ä‚†ü‚†Ä‚†Ä‚†Ä‚†Ä\n" +
                        "‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†ô‚¢ß‚£Ä‚°∞‚°ë‚°Ä‚†Ä‚†§‚†¥‚†õ‚¢≤‚†í‚†Ä‚¢†‚¢∏‚†ø‚†æ‚†ã‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä\n" +
                        "‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†â‚†è‚†ë‚†ß‚¢á‚£Ñ‚¢à‚°í‚£ä‚£Ñ‚†º‚†ö‚†ô‚¢•‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä\n" +
                        "‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚£†‚¢∫‚†Ç‚†Ä‚†Ä‚††‚°Ä‚†â‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢™‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä\n" +
                        "‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚°∏‚†Å‚†ò‚°Ü‚†Ä‚†Ä‚†à‚†á‚°Ä‚†Ä‚†Ä‚†Ä‚°Ç‚†Ä‚†Ä‚¢∏‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä\n" +
                        "‚†Ä‚†Ä‚†Ä‚†Ä‚£¶‚£Ä‚£Ä‚£á‚†Ä‚†Ä‚¢£‚°Ä‚†Ä‚†Ä‚†à‚†£‚£Ä‚†Ä‚£Ñ‚†É‚†Ä‚†Ä‚°ü‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä\n" +
                        "‚†Ä‚†Ä‚†Ä‚†Ä‚†ë‚¢Ö‚£†‚°É‚£Ä‚£Ä‚°Ä‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚¢´‚¢π‚†Å‚†Ä‚†Ä‚†Ä‚¢¶‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä\n" +
                        "‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢π‚¢©‚¢Ä‚¢Ä‚£à‚°á‚†Ä‚†Ä‚†Ä‚†Ä‚¢∏‚°ò‚†Ñ‚†Ä‚¢Ä‚†Ä‚¢à‚°Ö‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä\n" +
                        "‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†à‚†â‚†Å‚†Ä‚†à‚†ö‚†í‚†ì‚†í‚†ã‚†Ä‚†â‚†â‚†â‚†â‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä\n" +
                        "      _   _            _     _ \n" +
                        "     | | | | __ _  ___| |__ (_)\n" +
                        "     | |_| |/ _` |/ __| '_ \\| |\n" +
                        "     |  _  | (_| | (__| | | | |\n" +
                        "     |_| |_|\\__,_|\\___|_| |_|_|\n";
        System.out.println("Woof! Nice to meet you" + logo + "\n" + separation);
    }

    public static void end() {
        String exit =
                "‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä\n" +
                        "‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚°§‚†í‚†ã‚†ì‚†ã‚†â‚†â‚†â‚†â‚†í‚¢¶‚£Ä‚°Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚£Ä‚†Ä‚†Ä‚†Ä‚†Ä\n" +
                        "‚†Ä‚†Ä‚¢Ä‚°§‚†û‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†à‚†â‚¢£‚°Ä‚†Ä‚¢Ä‚°§‚†û‚†â‚†â‚†ô‚°Ü‚†Ä‚†Ä\n" +
                        "‚†Ä‚£∞‚†É‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚°†‚†Ä‚†Ä‚†Ä‚†≥‚£Ñ‚£è‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†à‚¢≥‚°Ä\n" +
                        "‚¢Ä‚°è‚†Ä‚†Ä‚°é‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚°á‚†Ä‚†Ä‚†Ä‚†Ä‚¢∏‚¢∏‚°Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚°º‚†Å\n" +
                        "‚†Ä‚°á‚†Ä‚¢Ä‚†ó‚†Ä‚¢†‚£§‚°Ä‚†Ä‚†Ä‚¢Ä‚£Ä‚°Ä‚†Ä‚†É‚†Ä‚†Ä‚†Ä‚†Ä‚†ò‚°æ‚¢Ñ‚°Ä‚†Ä‚†Ä‚†Ä‚£†‚†á‚†Ä\n" +
                        "‚†Ä‚†ô‚¢§‚£º‚†Ü‚†Ä‚†à‚†â‚£§‚£§‚°Ñ‚†ò‚†õ‚†É‚†Ä‚¢±‚†Ä‚†Ä‚†Ä‚¢Ä‚°∞‚†É‚†Ä‚†à‚†í‚†ë‚¢∫‚°Ä‚†Ä‚†Ä\n" +
                        "‚†Ä‚†Ä‚†Ä‚†ò‚¢á‚°Ä‚†Ä‚†¢‚°¨‚†Ø‚£Ä‚°Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢ì‚†Ñ‚†ê‚†Å‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢≥‚†Ä‚†Ä\n" +
                        "‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ø‚†¢‚¢Ñ‚°à‚†â‚†Ä‚†Ä‚†Ä‚£Ä‚£Ä‚°†‚†É‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢∏‚°Ä‚†Ä\n" +
                        "‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†∏‚°Ä‚†Ä‚†à‚†â‚†â‚†Å‚†â‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚†Ç‚†Ä‚†Ä‚¢†‚†á‚†Ä\n" +
                        "‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢π‚†¢‚°Ñ‚†Ä‚†Ä‚†Ä‚°Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚†å‚†Ä‚†Ä‚†Ä‚†∏‚°Ä‚†Ä\n" +
                        "‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚°∏‚†Ä‚†à‚†í‚¢Ç‚£Ñ‚†á‚†Ä‚†Ä‚†Ä‚†Ä‚°∏‚†§‚¢î‚°∂‚†ä‚†â‚¢≥‚°Ñ‚†Ä‚†Ñ‚†Ä‚°á‚†Ä\n" +
                        "‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚¢∞‚†É‚†Ä‚†Ä‚¢Ä‚°û‚°º‚†Ä‚†Ä‚†Ä‚†Ä‚¢Ä‚°ü‚†ö‚†ã‚†Ä‚†Ä‚†Ä‚¢Ø‚£Ñ‚£Ñ‚£†‚†û‚†Ä‚†Ä\n" +
                        "‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†à‚†õ‚†ì‚†í‚†ã‚†∏‚£†‚£†‚£Ä‚£Ä‚°ñ‚†ã‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä\n" +
                        "‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä‚†Ä\n";
        System.out.println("Come play again!" + exit + "\n" + separation);
    }

    public void success(int code) {
        switch (code) {
            case TODO: // 0
                System.out.println("üê∂ Hachi fetched a new task for you!");
                break;

            case DEADLINE: // 1
                System.out.println("üê∂ Hachi noted your deadline carefully!");
                break;

            case EVENT: // 2
                System.out.println("üê∂ Hachi added your event to the calendar!");
                break;

            case MARK: // 3
                System.out.println("üê∂ Hachi wags his tail proudly: 'Task complete!'");
                break;

            case UNMARK: // 4
                System.out.println("üê∂ Hachi whines softly: 'Did we bark too soon?'");
                break;

            case DELETE: // 5
                System.out.println("üê∂ Hachi dug a hole and buried that task. It‚Äôs gone!");
                break;
        }

        // after every success, show the total count
        System.out.println(String.format("You now have (%d) task%s",
                tasks.tasks.size(),
                tasks.tasks.size() == 1 ? "" : "s"));
        System.out.println(separation);
    }


    public static void failure(int error) {
        switch (error) {
            case TODO:
                System.out.println("Woof! You can't just do nothing!" + "\n" + separation);
                break;

            case DEADLINE:
                System.out.println("üê∂ Hachi paws at you: 'I need both a task and a deadline! "
                        + "Use it like: deadline <task> /by <time>'");
                printTimeNote();
                break;

            case EVENT:
                System.out.println("üê∂ Hachi tilts his head: 'I need a task, a start time, and an end time! "
                        + "Use it like: event <task> /from <start> /to <end>'");
                printTimeNote();
                break;

            case MARK:
                System.out.println("üê∂ Hachi is confused: 'which task should i mark?'" + "\n" + separation);
                break;

            case UNMARK:
                System.out.println("üê∂ Hachi is confused: 'which task should i unmark?'" + "\n" + separation);
                break;

            case DELETE:
                System.out.println("üê∂ Hachi is confused: 'which task should i remove?'" + "\n" + separation);
                break;

            case UNKNOWN:
                System.out.println("üê∂ Hachi tilts his head: 'I don‚Äôt understand that command.'\n" + separation);
                break;

            case MISSING:
                System.out.println("üê∂ Hachi sniffed everywhere, but no task found with that number.");
                System.out.println("Maybe fetch another number?\n" + separation);
                break;
        }
    }

    private static void printTimeNote() {
        System.out.println("Note: Input your time as d/M/yyyy HHmm so Hachi can understand"
                + "\n" + separation);
    }
}


